{
    "sample_order": 122,
    "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator system with driving force, considering noisy inputs.\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    # Add noise handling to inputs\n    t_noisy = t + np.random.normal(0, 0.1, len(t))\n    x_noisy = x + np.random.normal(0, 0.1, len(x))\n    v_noisy = v + np.random.normal(0, 0.1, len(v))\n    \n    dv = params[0] * t_noisy + params[1] * x_noisy + params[2] * v_noisy + params[3] + params[4] * np.cos(params[5] * t_noisy) + params[6] * v_noisy**2\n    \n    return dv\n\n",
    "score": -1718.9386037942782,
    "params": [
        1.0000202000054825,
        1.0000094988187382,
        1.0000266850181856,
        1.0000419167282943,
        1.0000233492391362,
        1.0000239920254888,
        1.0000053672311444,
        1.0000123499947677,
        1.0000291699918016,
        1.0000298327030888
    ],
    "top_3_scores": [
        {
            "score": -7.623245353750162e-06,
            "sample_order": 31,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] * t * x + params[4] * t * v + params[5] * x * v + params[6] * t**2 + params[7] * x**2 + params[8] * v**2 + params[9] * np.sin(t)\n    return dv",
            "params": [
                5.1896020621225775e-05,
                -5.00961854109476,
                -0.07312777449260101,
                -3.415813948018029e-05,
                0.0010878408030337446,
                -1.0085507985145272,
                -1.2124472241909354e-06,
                -2.4959613070163087,
                -0.010453110109833397,
                0.2997832473693987
            ]
        },
        {
            "score": -7.623245353750162e-06,
            "sample_order": 32,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] * t * x + params[4] * t * v + params[5] * x * v + params[6] * t**2 + params[7] * x**2 + params[8] * v**2 + params[9] * np.sin(t)\n    return dv",
            "params": [
                5.1896020621225775e-05,
                -5.00961854109476,
                -0.07312777449260101,
                -3.415813948018029e-05,
                0.0010878408030337446,
                -1.0085507985145272,
                -1.2124472241909354e-06,
                -2.4959613070163087,
                -0.010453110109833397,
                0.2997832473693987
            ]
        },
        {
            "score": -0.0006869749605523638,
            "sample_order": 12,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\"Final mathematical function for acceleration in a damped nonlinear oscillator with driving force.\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] * v**2 + params[4] * np.sin(t) + params[5] * np.cos(t)\n    return dv",
            "params": [
                -0.0007204662323967207,
                -5.008745879222754,
                -0.04197666708507598,
                0.21194989479093432,
                0.294358129989389,
                0.0006386699266071352,
                1.0,
                1.0,
                1.0,
                1.0
            ]
        }
    ]
}