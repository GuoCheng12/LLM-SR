{
    "sample_order": 172,
    "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\"Improved version of the mathematical function for acceleration in a damped nonlinear oscillator with driving force.\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized.\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    m = params[0]  # Mass of the oscillator\n    k = params[1]  # Spring constant\n    c = params[2]  # Damping coefficient\n    A = params[3]  # Amplitude of the driving force\n    omega = params[4]  # Angular frequency of the driving force\n    b = params[5]  # Nonlinear damping coefficient\n    alpha = params[6]  # Nonlinear term parameter\n    beta = params[7]  # Nonlinear term parameter\n\n    dv = (-k * x - c * v + A * np.sin(omega * t) - b * v ** 2 + alpha * np.tanh(beta * x)) / m\n\n    return dv\n\n",
    "score": -0.029884493174124917,
    "params": [
        1.1672373285060593,
        4.300595072297285,
        0.019307464500576386,
        0.09163494064114094,
        2.024957983798225,
        -0.03931179691403151,
        -0.2260107961475098,
        -0.1905355735066879,
        1.0,
        1.0
    ],
    "top_3_scores": [
        {
            "score": -7.623245353750162e-06,
            "sample_order": 31,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] * t * x + params[4] * t * v + params[5] * x * v + params[6] * t**2 + params[7] * x**2 + params[8] * v**2 + params[9] * np.sin(t)\n    return dv",
            "params": [
                5.1896020621225775e-05,
                -5.00961854109476,
                -0.07312777449260101,
                -3.415813948018029e-05,
                0.0010878408030337446,
                -1.0085507985145272,
                -1.2124472241909354e-06,
                -2.4959613070163087,
                -0.010453110109833397,
                0.2997832473693987
            ]
        },
        {
            "score": -7.623245353750162e-06,
            "sample_order": 32,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] * t * x + params[4] * t * v + params[5] * x * v + params[6] * t**2 + params[7] * x**2 + params[8] * v**2 + params[9] * np.sin(t)\n    return dv",
            "params": [
                5.1896020621225775e-05,
                -5.00961854109476,
                -0.07312777449260101,
                -3.415813948018029e-05,
                0.0010878408030337446,
                -1.0085507985145272,
                -1.2124472241909354e-06,
                -2.4959613070163087,
                -0.010453110109833397,
                0.2997832473693987
            ]
        },
        {
            "score": -8.07855333136696e-06,
            "sample_order": 145,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * np.sin(t) + params[1] * x + params[2] * v + params[3] * np.cos(t) + params[4] * np.sin(t) * x + params[5] * np.sin(t) * v + params[6] * x * v + params[7] * np.cos(t) + params[8] * x**2 + params[9] * v**2\n    return dv",
            "params": [
                0.3000391469302129,
                -5.011631701087172,
                -0.02943588622395315,
                -0.0007296133897903462,
                -0.0027866294346452726,
                4.652975498026929e-06,
                -0.9884690929057836,
                -0.0007295944295808155,
                -2.4975597263628724,
                -0.009765478701779013
            ]
        }
    ]
}