{
    "sample_order": 2,
    "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\"Most accurate version of the equation.\"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] * x * v + params[4] * t**2 + params[5] * x**2 + params[6] * v**2\n    return dv\n\n",
    "score": -0.03145870423165192,
    "params": [
        2.5153739315897884e-05,
        -3.8607033283753656,
        -0.07513572480636471,
        -0.030550876706234832,
        -2.514076591854075e-05,
        -0.49459245375243216,
        0.5868519866857254,
        1.0,
        1.0,
        1.0
    ],
    "top_3_scores": [
        {
            "score": -0.03145870423165192,
            "sample_order": 2,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\"Most accurate version of the equation.\"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] * x * v + params[4] * t**2 + params[5] * x**2 + params[6] * v**2\n    return dv",
            "params": [
                2.5153739315897884e-05,
                -3.8607033283753656,
                -0.07513572480636471,
                -0.030550876706234832,
                -2.514076591854075e-05,
                -0.49459245375243216,
                0.5868519866857254,
                1.0,
                1.0,
                1.0
            ]
        },
        {
            "score": -0.031912306980294444,
            "sample_order": 0,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x  +  params[2] * v + params[3]\n    return dv",
            "params": [
                -0.002219229716407964,
                -3.8507477829429773,
                -0.0635255963285802,
                0.06437734081496001,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0
            ]
        }
    ]
}