{
    "sample_order": 8,
    "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] + params[4] * t**2 + params[5] * x**2 + params[6] * v**2\n    return dv\n\n",
    "score": -0.03077789802591222,
    "params": [
        0.0731815677916714,
        -3.8940850650361885,
        -0.062331274521109106,
        -1.4642145548402057,
        -0.0009280232133750132,
        0.03910067217618179,
        0.7863968318853727,
        1.0,
        1.0,
        1.0
    ],
    "top_3_scores": [
        {
            "score": -0.029807657614431254,
            "sample_order": 5,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] * t * x + params[4] * t * v + params[5] * x * v + params[6] * t**2 + params[7] * x**2 + params[8] * v**2 + params[9]\n    return dv",
            "params": [
                0.04508823188015436,
                -5.03795703315302,
                -1.1910134567440886,
                0.029043588539161204,
                0.02891306343386886,
                -0.1901420963419223,
                -0.0005748314945900183,
                0.4661990422012432,
                0.8565561622277037,
                -0.9181516802350872
            ]
        },
        {
            "score": -0.03077789802591222,
            "sample_order": 4,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x  +  params[2] * v + params[3] + params[4] * t**2 + params[5] * x**2 + params[6] * v**2\n    return dv",
            "params": [
                0.0731815677916714,
                -3.8940850650361885,
                -0.062331274521109106,
                -1.4642145548402057,
                -0.0009280232133750132,
                0.03910067217618179,
                0.7863968318853727,
                1.0,
                1.0,
                1.0
            ]
        },
        {
            "score": -0.03077789802591222,
            "sample_order": 8,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] + params[4] * t**2 + params[5] * x**2 + params[6] * v**2\n    return dv",
            "params": [
                0.0731815677916714,
                -3.8940850650361885,
                -0.062331274521109106,
                -1.4642145548402057,
                -0.0009280232133750132,
                0.03910067217618179,
                0.7863968318853727,
                1.0,
                1.0,
                1.0
            ]
        }
    ]
}