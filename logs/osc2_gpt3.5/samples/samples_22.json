{
    "sample_order": 22,
    "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t**2 + params[1] * x**2 + params[2] * v**2 + params[3] * t + params[4] * x + params[5] * v + params[6]\n    return dv\n\n",
    "score": -0.030777897886257614,
    "params": [
        -0.0009280142469755669,
        0.039118294541142684,
        0.7863946980005095,
        0.07318083941924233,
        -3.8940860759004536,
        -0.062331653793164556,
        -1.4642001505347149,
        1.0,
        1.0,
        1.0
    ],
    "top_3_scores": [
        {
            "score": -0.0006869749605523638,
            "sample_order": 12,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\"Final mathematical function for acceleration in a damped nonlinear oscillator with driving force.\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] * v**2 + params[4] * np.sin(t) + params[5] * np.cos(t)\n    return dv",
            "params": [
                -0.0007204662323967207,
                -5.008745879222754,
                -0.04197666708507598,
                0.21194989479093432,
                0.294358129989389,
                0.0006386699266071352,
                1.0,
                1.0,
                1.0,
                1.0
            ]
        },
        {
            "score": -0.0006869749605523638,
            "sample_order": 18,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\"Final mathematical function for acceleration in a damped nonlinear oscillator with driving force.\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    # Define the mathematical function for acceleration in a damped nonlinear oscillator with driving force\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] * v**2 + params[4] * np.sin(t) + params[5] * np.cos(t)\n    return dv",
            "params": [
                -0.0007204662323967207,
                -5.008745879222754,
                -0.04197666708507598,
                0.21194989479093432,
                0.294358129989389,
                0.0006386699266071352,
                1.0,
                1.0,
                1.0,
                1.0
            ]
        },
        {
            "score": -0.0006869749605523638,
            "sample_order": 19,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    \"\"\"Final mathematical function for acceleration in a damped nonlinear oscillator with driving force.\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] * v**2 + params[4] * np.sin(t) + params[5] * np.cos(t)\n    return dv",
            "params": [
                -0.0007204662323967207,
                -5.008745879222754,
                -0.04197666708507598,
                0.21194989479093432,
                0.294358129989389,
                0.0006386699266071352,
                1.0,
                1.0,
                1.0,
                1.0
            ]
        }
    ]
}