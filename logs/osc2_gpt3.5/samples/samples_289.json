{
    "sample_order": 289,
    "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] * np.sin(params[4] * t) - params[5] * v * abs(v) + params[6] * x**2 - params[7] * x * v\n    return dv\n\n",
    "score": -0.029042864425440632,
    "params": [
        -0.0007086431006053716,
        -4.0082371549377,
        0.3543900698675423,
        -0.08150900963275198,
        0.7749725515126336,
        1.86144806502263,
        -0.07137878183066097,
        -0.23057957594711903,
        1.0,
        1.0
    ],
    "top_3_scores": [
        {
            "score": -7.623245353750162e-06,
            "sample_order": 31,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] * t * x + params[4] * t * v + params[5] * x * v + params[6] * t**2 + params[7] * x**2 + params[8] * v**2 + params[9] * np.sin(t)\n    return dv",
            "params": [
                5.1896020621225775e-05,
                -5.00961854109476,
                -0.07312777449260101,
                -3.415813948018029e-05,
                0.0010878408030337446,
                -1.0085507985145272,
                -1.2124472241909354e-06,
                -2.4959613070163087,
                -0.010453110109833397,
                0.2997832473693987
            ]
        },
        {
            "score": -7.623245353750162e-06,
            "sample_order": 32,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] * t * x + params[4] * t * v + params[5] * x * v + params[6] * t**2 + params[7] * x**2 + params[8] * v**2 + params[9] * np.sin(t)\n    return dv",
            "params": [
                5.1896020621225775e-05,
                -5.00961854109476,
                -0.07312777449260101,
                -3.415813948018029e-05,
                0.0010878408030337446,
                -1.0085507985145272,
                -1.2124472241909354e-06,
                -2.4959613070163087,
                -0.010453110109833397,
                0.2997832473693987
            ]
        },
        {
            "score": -7.623245353750162e-06,
            "sample_order": 234,
            "function": "def equation(t: np.ndarray, x: np.ndarray, v: np.ndarray, params: np.ndarray) -> np.ndarray:\n    \"\"\" Mathematical function for acceleration in a damped nonlinear oscillator\n\n    Args:\n        t: A numpy array representing time.\n        x: A numpy array representing observations of current position.\n        v: A numpy array representing observations of velocity.\n        params: Array of numeric constants or parameters to be optimized\n\n    Return:\n        A numpy array representing acceleration as the result of applying the mathematical function to the inputs.\n    \"\"\"\n    dv = params[0] * t + params[1] * x + params[2] * v + params[3] * t * x + params[4] * t * v + params[5] * x * v + params[6] * t**2 + params[7] * x**2 + params[8] * v**2 + params[9] * np.sin(t)\n    return dv",
            "params": [
                5.1896020621225775e-05,
                -5.00961854109476,
                -0.07312777449260101,
                -3.415813948018029e-05,
                0.0010878408030337446,
                -1.0085507985145272,
                -1.2124472241909354e-06,
                -2.4959613070163087,
                -0.010453110109833397,
                0.2997832473693987
            ]
        }
    ]
}